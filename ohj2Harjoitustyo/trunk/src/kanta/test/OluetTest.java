package kanta.test;
// Generated by ComTest BEGIN
import java.io.File;
import kanta.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.21 04:50:05 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class OluetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta63 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta63() throws SailoException {    // Oluet: 63
    Oluet uudetOluet = new Oluet(); 
    Olut koff = new Olut(); koff.vastaaKoff(2); 
    Olut karjala = new Olut(); karjala.vastaaKoff(1); 
    Olut karhu = new Olut(); karhu.vastaaKoff(2); 
    String tiedNimi = "merkit"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    uudetOluet.lueTiedostosta(tiedNimi); 
    fail("Oluet: 73 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    uudetOluet.lisaa(koff); 
    uudetOluet.lisaa(karjala); 
    uudetOluet.lisaa(karhu); 
    uudetOluet.talleta(); 
    uudetOluet = new Oluet(); 
    uudetOluet.lueTiedostosta(tiedNimi); 
    Iterator<Olut> i = uudetOluet.iterator(); 
    assertEquals("From: Oluet line: 81", koff.toString(), i.next().toString()); 
    assertEquals("From: Oluet line: 82", karjala.toString(), i.next().toString()); 
    assertEquals("From: Oluet line: 83", karhu.toString(), i.next().toString()); 
    assertEquals("From: Oluet line: 84", false, i.hasNext()); 
    uudetOluet.lisaa(karhu); 
    uudetOluet.talleta(); 
    assertEquals("From: Oluet line: 87", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Oluet line: 89", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator191 */
  @Test
  public void testIterator191() {    // Oluet: 191
    Oluet uudetOluet = new Oluet(); 
    Olut koff = new Olut(2); uudetOluet.lisaa(koff); 
    Olut karjala = new Olut(1); uudetOluet.lisaa(karjala); 
    Olut karhu = new Olut(2); uudetOluet.lisaa(karhu); 
    Iterator<Olut> i2=uudetOluet.iterator(); 
    assertEquals("From: Oluet line: 203", koff, i2.next()); 
    assertEquals("From: Oluet line: 204", karjala, i2.next()); 
    assertEquals("From: Oluet line: 205", karhu, i2.next()); 
    try {
    assertEquals("From: Oluet line: 206", karjala, i2.next()); 
    fail("Oluet: 206 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int tyypID[] = { 2,1,2} ; 
    for ( Olut olu:uudetOluet ) {
    assertEquals("From: Oluet line: 212", tyypID[n], olu.getTyyppiID()); n++; 
    }
    assertEquals("From: Oluet line: 215", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa231 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa231() throws SailoException,CloneNotSupportedException {    // Oluet: 231
    Oluet oluet = new Oluet(); 
    Olut koff = new Olut(), karjala = new Olut(); 
    koff.rekisteroi(); karjala.rekisteroi(); 
    assertEquals("From: Oluet line: 237", 0, oluet.getLkm()); 
    oluet.korvaaTaiLisaa(koff); assertEquals("From: Oluet line: 238", 1, oluet.getLkm()); 
    oluet.korvaaTaiLisaa(karjala); assertEquals("From: Oluet line: 239", 2, oluet.getLkm()); 
    Olut korvausOlut = koff.clone(); 
    korvausOlut.aseta(3,"kkk"); 
    Iterator<Olut> it = oluet.iterator(); 
    assertEquals("From: Oluet line: 243", true, it.next() == koff); 
    oluet.korvaaTaiLisaa(korvausOlut); assertEquals("From: Oluet line: 244", 2, oluet.getLkm()); 
    it = oluet.iterator(); 
    Olut j0 = it.next(); 
    assertEquals("From: Oluet line: 247", korvausOlut, j0); 
    assertEquals("From: Oluet line: 248", true, j0 == korvausOlut); 
    assertEquals("From: Oluet line: 249", false, j0 == koff); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista270 
   * @throws SailoException when error
   */
  @Test
  public void testPoista270() throws SailoException {    // Oluet: 270
    Oluet oluet = new Oluet(); 
    Olut koff = new Olut(); koff.vastaaKoff(2); 
    Olut karjala = new Olut(); karjala.vastaaKoff(1); 
    Olut heineken = new Olut(); heineken.vastaaKoff(2); 
    Olut karhu = new Olut(); karhu.vastaaKoff(1); 
    Olut sandels = new Olut(); sandels.vastaaKoff(2); 
    oluet.lisaa(koff); 
    oluet.lisaa(karjala); 
    oluet.lisaa(heineken); 
    oluet.lisaa(karhu); 
    assertEquals("From: Oluet line: 283", false, oluet.poista(sandels)); assertEquals("From: Oluet line: 283", 4, oluet.getLkm()); 
    assertEquals("From: Oluet line: 284", true, oluet.poista(karjala)); assertEquals("From: Oluet line: 284", 3, oluet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaOluttyypinOluet299 */
  @Test
  public void testPoistaOluttyypinOluet299() {    // Oluet: 299
    Oluet oluet = new Oluet(); 
    Olut koff = new Olut(); koff.vastaaKoff(2); 
    Olut karjala = new Olut(); karjala.vastaaKoff(1); 
    Olut heineken = new Olut(); heineken.vastaaKoff(2); 
    Olut karhu = new Olut(); karhu.vastaaKoff(1); 
    Olut sandels = new Olut(); sandels.vastaaKoff(2); 
    oluet.lisaa(koff); 
    oluet.lisaa(karjala); 
    oluet.lisaa(heineken); 
    oluet.lisaa(karhu); 
    assertEquals("From: Oluet line: 310", 3, oluet.poista(koff)); assertEquals("From: Oluet line: 310", 2, oluet.getLkm()); 
    assertEquals("From: Oluet line: 311", 0, oluet.poista(karjala)); assertEquals("From: Oluet line: 311", 2, oluet.getLkm()); 
    List<Olut> h = oluet.annaOluet(2); 
    assertEquals("From: Oluet line: 313", 0, h.size()); 
    h = oluet.annaOluet(1); 
    assertEquals("From: Oluet line: 315", koff, h.get(0)); 
    assertEquals("From: Oluet line: 316", heineken, h.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaOluet339 */
  @Test
  public void testAnnaOluet339() {    // Oluet: 339
    Oluet uudetOluet = new Oluet(); 
    Olut pitsi21 = new Olut(2); uudetOluet.lisaa(pitsi21); 
    Olut pitsi11 = new Olut(1); uudetOluet.lisaa(pitsi11); 
    Olut pitsi22 = new Olut(2); uudetOluet.lisaa(pitsi22); 
    Olut pitsi12 = new Olut(1); uudetOluet.lisaa(pitsi12); 
    Olut pitsi23 = new Olut(2); uudetOluet.lisaa(pitsi23); 
    Olut pitsi51 = new Olut(5); uudetOluet.lisaa(pitsi51); 
    List<Olut> loytyneet; 
    loytyneet = uudetOluet.annaOluet(3); 
    assertEquals("From: Oluet line: 352", 0, loytyneet.size()); 
    loytyneet = uudetOluet.annaOluet(1); 
    assertEquals("From: Oluet line: 354", 2, loytyneet.size()); 
    assertEquals("From: Oluet line: 355", true, loytyneet.get(0) == pitsi11); 
    assertEquals("From: Oluet line: 356", true, loytyneet.get(1) == pitsi12); 
    loytyneet = uudetOluet.annaOluet(5); 
    assertEquals("From: Oluet line: 358", 1, loytyneet.size()); 
    assertEquals("From: Oluet line: 359", true, loytyneet.get(0) == pitsi51); 
  } // Generated by ComTest END
}